// Start clean
Clear Log();
Clear Symbols();
Clear Globals();
online =1;

report_path = "H:\Device development\TSI\Reports\AutoGenerated\";
data_path = "H:\Device development\TSI\Etest\SWP\CSV\";

if (online == 0,
report_path = "C:\Device development\TSI\Etest\SWP\Reports\";
data_path = "C:\Device development\TSI\Etest\SWP\CSV\";
);



// Constants
Vd = 0.050;
Vfb = -1.0;
epsilon = 8.854e-12;
erox = 3.9;
mu_high=0;
dt = current data table();
littleq = 1.6021765e-19;
E_high = 0.8;
// Reference data table and generate device list summary
table_name = dt << get name ();
max_mu_vt_slope = -170; //Max_mu to Vt slope
normalized_vt = 0.7;
dt:waferid << data type(Numeric)<<Set Modeling Type (Ordinal);

mu_master = New Table( table_name||"_mu_master", Invisible );

dt << Sort(
	Replace table,
	By( :LOTID, :WAFERID, :DIEX, :DIEY, :SITE, :VG ),
	Order( Ascending, Ascending, Ascending, Ascending, Ascending, Ascending )
);
dt << Clear Column Selection;
sum_dt = dt << Summary(
	Private,
	Output Table Name( "sum_dt" ),
	Group( :LOTID, :WAFERID, :DIEX, :DIEY, :SITE, :DEVICE )
);
col_name_list = dt << get column names(string);

srow = 6;
//Sequence through each individaul device
For( srow = 1, srow <= N Rows( sum_dt ), srow++,
	Current Data Table( sum_dt );
	Row() = srow;
	sum_dt << Go to Row( srow );
	
	device_name = sum_dt:Device;
	If( Contains( device_name, "NFET" ),
		Ido = 300.0e-9;
		Rso = Vd / Ido;
		Rslow100 = Vd / Ido*100;
		Rslow10 = Vd / Ido*10;

	);

	If( Contains( device_name, "1P8V_" ),
		Vdd = 1.8;
		//Area = 1584.0 * 1e-12;
		Area = 4400.0 * 1e-12;
	);
	If( Contains( device_name, "5V_" ),
		Vdd = 5.0;
		//Area = 3587.0 * 1e-12;
		Area = 4400.0 * 1e-12;
	);

	Current Data Table( dt );
	cv_dt = dt << Subset( Private, (Selected Rows), Output Table Name( "cv_dt" ) );

	Current Data Table( cv_dt );
	cv_dt << New Column( "CGC_corrected" );
	cv_dt << New Column( "CGG_corrected" );
	cv_dt << New Column( "CGB_corrected" );
	cv_dt << New Column( "Toxe" );
	cv_dt << New Column( "dQinv" );
	cv_dt << New Column( "Qinv" );
	cv_dt << New Column( "Eeff" );
	cv_dt << New Column( "universal_mu" );
	cv_dt << New Column( "mu" );

// Calculate parasitic offsets
    CGGo=0;
	For Each Row( If( :VG == Vfb, CGCo = :CGC ) );
	For Each Row( If( :VG == Vdd, CGGo = :CGG - :CGC + CGCo ) );

// Calculate capacitance densities, Tox, and Qinv
	For Each Row(
		:CGC_corrected = Abs( :CGC - CGCo ) / Area;
		:CGG_corrected = Abs( :CGG - CGGo ) / Area;
		:CGB_corrected = Abs( :CGG_corrected - :CGC_corrected );
	
		If( :VG > 0 & :CGG_corrected > 0,
			:Toxe = epsilon * erox / :CGG_corrected;
		//	:Toxe = 46.25*1E-10;
		);

		If( (:VG > Vfb) & (Row() > 1),
			:dQinv = :CGC_corrected * (Lag( :VG, 0 ) - Lag( :VG, 1 )) / 1,
			:dQinv = 0.0
		);

		:Qinv = 0.0;
		If( Row() > 1,
			:Qinv = Lag( :Qinv, 1 ) + :dQinv
		);
	);
	vgmin = col minimum(:Vg);
	For Each Row(
		If( :VG == vgmin,
			Cacc = :CGG_corrected;
		);  // Tox is at Vdd
	);

    Cinv = col minimum (:CGG_corrected);
    Cdep = 1/(1/Cinv - 1/Cacc);

// Extract Tox
	// Toxe_val = Col Minimum( :Toxe ); // Tox is minimum value 
	For Each Row(
		If( :VG <= Vdd,
			Toxe_val = :Toxe
		);  // Tox is at Vdd
	);



	// Extract Vt by linear interpolation at fixed current density
	row = 0;
	For Each Row( If( :Rs <= Rso & Lag( :Rs >= Rso, 1 ), row = Row() ) );
	Row() = row;
	Vt = Interpolate( Rso, :Rs, :VG, Lag( :Rs, 1 ), Lag( :VG, 1 ) );

// only if we found the VT and ID is in the column list
if (row>0 & contains(col_name_list, "ID")>0,
    // Extract ID_Vt
    Row() = row;
	show (Vg[]);
	show (ID[]);
	show (lag(:Vg,1));
	show (lag (:id,1));
	show (vt);
	//Id_Vt = Interpolate( Vt, VG[], ID[], Lag( :VG, 1 ), Lag( :ID, 1 ) );
   
    Id_Vt = (Lag( :ID, 1 )-ID[])/(lag(:Vg,1)-Vg[])*(Vt-Vg[])+ID[];
    
    show (Id_Vt);
    

    // Extract Vt_100
    Id_100= id_vt/2000;
    Id_10= Id_Vt/10;


    k=1;
    slope ={};
	For Each Row( If( :ID >= Id_100 &  :ID < Id_10 & lag(:id,-3) < Id_10,
	x = {log10(:id) , log10(lag(:id, -1)) , log10(lag(:id, -2)), log10(lag(:id, -3))}; ytmp= {:vg, lag(:vg, -1), lag(:vg, -2), lag(:vg, -3)}*1000; 
	b = {1, 1, 1,1};
	A = matrix ({x,b})`;
	y = matrix ({ytmp})`;
	LSR= inv(A`*A)*A`*y;
	slope[k] =LSR[1];k=k+1;)    );
	show (slope);
	
    
    
	row = 0;
	For Each Row( If( :ID <= Id_100 & Lag( :ID >= Id_100, -1 ), row = Row() ) );
	Row() = row;
	Vt_off_100 = Interpolate(log(Id_100) , log(:ID), :VG, log(Lag( :ID, -1 )), Lag( :VG, -1 ) );


    row = 0;
	For Each Row( If( :ID <= Id_10 & Lag( :ID >= Id_10, -1 ), row = Row() ) );
	Row() = row;
	Vt_off_10 = Interpolate( log(Id_10), log(:ID), :VG, log(Lag( :ID, -1 )), Lag( :VG, -1 ) );


	//SS100= (Vt_off_10 - Vt_off_100)*1000/2;
	SS100 = mean (slope);
    Dit = ((SS100/60 -1 )*Cacc - Cdep )/littleq/1E4; // normalized by Cm^2
    show(Dit);
);


// Calculate Eeff and mu
    gotit=0;
    mu_high_percent=0;
	For Each Row(
		If( :VG > 0,
			:Eeff = (:VG + Vt + 0.2) / 6.0 / Toxe_val * 1e-6 / 100;
			:universal_mu = 540*(1+(:Eeff/0.9)^1.85)^-1;
			
			If( :Qinv > 0,
				:mu = 1 / :Rs / :Qinv * 1.0e4;
			    
				if (:Eeff <= E_high & gotit==0, mu_high=:mu; mu_high_percent= (:mu-:universal_mu)/:universal_mu );
				if (:Eeff >E_high, gotit=1;  );
			);
		);
 
	);
   // row =0;
   // For Each Row(if (:Eeff <=0.77 & Lag( :Eeff >= 0.77,1), mu_high=:mu));
    //row() = row;
    //mu_high = Interpolate (0.77, :Eeff, :mu, Lag(:Eeff,1),lag(:Eeff,1));
    

	Write( "\!N----------------------" );
	Show( srow );
	Show( device_name );
	Show( Vdd, Area );
	Show( CGCo * 1.0e15 );
	Show( CGGo * 1.0e15 );
	Show( Vt );
	

	Show( Toxe_val * 1e10 );
     
// Pick out mobility data starting at half of peak
	Max_mu_val = Col Maximum( :mu );
	Max_mu_normal = (normalized_vt-Vt)* (max_mu_vt_slope)+ Max_mu_val;
	For Each Row( If( :mu < Max_mu_val * 1 / 3, Vg_start = :VG ) );


	cv_dt << Select Where( (:mu > Max_mu_val * 1 / 3) | (:VG > Vg_start) );
	mu_dt = cv_dt << Subset( Private( Selected Rows ), Output Table Name( "mu_dt" ) );
       
  //  mu_dt= cv_dt;

b_2=1000; // get from Universal fitting

	mu_dt << New Column( "Model",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Formula(
			Parameter(
				{b0 = 0.5, b1 = 350},
				1 / (1 / (b0 * 1000000 * :Qinv) + 1 / (b1 * :Eeff ^ (-0.3)) + 1 / (b_2 * :Eeff ^ (-3)))
				
			)
		)
	);

	obj = mu_dt << Nonlinear(
		Y( :mu ),
		X( :Model ),
		Parameter Bounds( b0( 0.01, 10 ), b1( 100, 2000 ) ),
		Newton,
		Confidence Limits,
		Gradient Limit( 8e-5 ),
		Invisible,
		Finish,
		Accept Current Estimates,
		Save Estimates
	);

	names = obj << Get Parameter Names;
	est = obj << Get Estimates;
	stderr = obj << Get Std Errors;
	obj << Close window;
	Show( names );
	Show( est );
	Show( stderr );

	mu_dt << Add Multiple Columns( "DeviceIndex", 1, "Before First", Numeric, Ordinal );
	mu_dt << Add Multiple Columns( "Vtlin", 1, After( :Toxe ), Numeric, Continuous );
	mu_dt << Add Multiple Columns( "SS100", 1, After( :Vtlin ), Numeric, Continuous );
	mu_dt << Add Multiple Columns( "Dit", 1, After( :SS100 ), Numeric, Continuous );
    mu_dt << Add Multiple Columns( "Vtlin100", 1, After( :SS100 ), Numeric, Continuous );
mu_dt << Add Multiple Columns( "Vtlin10", 1, After( :Vtlin100 ), Numeric, Continuous );
	
	mu_dt << Add Multiple Columns( "b0", 1, After( :mu ), Numeric, Continuous );
	mu_dt << Add Multiple Columns( "b1", 1, After( :b0 ), Numeric, Continuous );
	mu_dt << Add Multiple Columns( "b2", 1, After( :b1 ), Numeric, Continuous );
    mu_dt << Add Multiple Columns( "Mu_highE", 1, After( :b2 ), Numeric, Continuous );
    mu_dt << Add Multiple Columns( "Mu_highE_Univ_Ratio", 1, After( :Mu_highE ), Numeric, Continuous );
    mu_dt << Add Multiple Columns( "Max_mu", 1, After( :Mu_highE_Univ_Ratio ), Numeric, Continuous );
    mu_dt << Add Multiple Columns( "Max_mu_normal", 1, After( :Max_mu ), Numeric, Continuous );

	mu_dt << Add Multiple Columns( "Mu_phonon", 1, After( :b2 ), Numeric, Continuous );
	mu_dt << Add Multiple Columns( "Mu_coulomb", 1, After( :Mu_phonon ), Numeric, Continuous );
	mu_dt << Add Multiple Columns( "Mu_surface", 1, After( :Mu_coulomb ), Numeric, Continuous );
	mu_dt << Add Multiple Columns( "Mu_no_coulomb", 1, After( :Mu_coulomb ), Numeric, Continuous );
	mu_dt << Add Multiple Columns( "Ratio_mu_univ", 1, After( :Mu_no_coulomb ), Numeric, Continuous );

	For Each Row(
		mu_dt,
		:Toxe = Toxe_val * 1.0e10;
		:Vtlin = Vt;
		:SS100 = SS100;
		:DeviceIndex = srow;
		:b0 = est[1];
		:b1 = est[2];
		:b2 = b_2;
		:Mu_phonon=   (est[2] * :Eeff ^ (-0.3));
		:Mu_coulomb=   (est[1] * 1000000 * :Qinv);
		:Mu_surface=   (b_2 * :Eeff ^ (-3));
		:Mu_no_coulomb=  1/(1/:mu -1/:Mu_coulomb);
		:Ratio_mu_univ = (:Mu-:universal_mu)/:universal_mu;
		
		:Mu_highE=mu_high;
		:Mu_highE_Univ_Ratio = mu_high_percent;
		:Max_mu = max_mu_val;
		:Max_mu_normal= Max_mu_normal;
	     if (contains (col_name_list, "ID"),
		:Dit = Dit;
		:Vtlin100 = Vt_off_100;
		:Vtlin10 = Vt_off_10;
		)
	);

// Concatenate into master table
	mu_dt << Rerun formulas; // Make sure formulas are evaluated before concatenating	
	mu_master << Concatenate( mu_dt, Append to first table );
	Try( mu_master << Delete Columns( :Column 1 ) );

// Close temporary calculation tables
	Try( Close( cv_dt, No Save ) );
	Try( Close( mu_dt, No Save ) );
);

// Finally close device list
Close( sum_dt, No Save );
mu_master << Delete Columns(  :CGC_corrected, :CGG_corrected, :CGB_corrected, :dQinv );
mu_master:Toxe << Set Property( "units", "Ang" );
mu_master:Vtlin << Set Property( "units", "V" );
mu_master:SS100 << Set Property( "units", "mV/dec" );

mu_master:Eeff << Set Property( "units", "MV/cm" );
mu_master:mu << Set Property( "units", "cm^2/V/s" );
mu_master:universal_mu << Set Property( "units", "cm^2/V/s" );
mu_master:Rs << Set Property( "units", "Ohms/sq" );
mu_master:VG << Set Property( "units", "V" );
mu_master:Qinv << Set Property( "units", "C/m^2" );
mu_master:Mu_highE_Univ_Ratio << Set Property( Axis, {format ("Percent")} );
mu_master:Ratio_mu_univ << Set Property( Axis, {format ("Percent")} );

mu_master << Show Window( 1 );


device_dt = mu_master << Summary(
	Output Table Name( table_name||"_Device_master" ),
	Group( :DeviceIndex, :LOTID, :WAFERID, :DIEX, :DIEY, :SITE, :DEVICE, :Toxe, :Vtlin, :SS100, :b0, :b1, :b2,:mu_highE,:Mu_highE_Univ_Ratio,:Dit,:Vtlin100,:Vtlin10,:Max_mu, :Max_mu_normal),
	
);



	device_dt << New Column( "Model",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Formula(
			Parameter(
				{a = 523, b = -120},
				a+ b*:Vtlin
				
			)
		)
	);

	obj = device_dt << nonlinear(
		Y( :max_mu ),
		X( :Model ),
		Parameter Bounds( a( -500, 10000 ), b( -500, 500 ) ),
		Newton,
		Confidence Limits,
		Gradient Limit( 8e-5 ),
		Invisible,
		Finish,
		Accept Current Estimates,
		Save Estimates
	);

	names = obj << Get Parameter Names;
	est = obj << Get Estimates;
	stderr = obj << Get Std Errors;
	obj << Close window;
	
	show (est);
	device_dt << New Column( "Max_mu_norm_new",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Formula(
				(normalized_vt-:Vtlin)*est[2]+:max_mu;
			)
		);
	
Try( device_dt << Delete Columns( :N Rows ) );


table_dt = Open("H:\Device development\TSI\Lots\DOE_split_table.jmp");
table_dt:name ("O2 Dose") << data type(Numeric)<<Set Modeling Type (Ordinal);

mu_master << Update(
	With( table_dt ),
	Match Columns( :LOTID = :LOTID, :WAFERID = :WAFERID )
);


device_dt << Update(
	With( table_dt ),
	Match Columns( :LOTID = :LOTID, :WAFERID = :WAFERID )
);


vt_dt = Open("H:\Device development\TSI\etest\map\Vt_map_master.jmp");

mu_master << Update(
	With( vt_dt ),
	Match Columns( :DieX = :x, :DieY = :y , :name ("Implant Stripe") = :name ("Implant Stripe"))
);


device_dt << Update(
	With( vt_dt ),
	Match Columns( :DieX = :x, :DieY = :y )
);

close (vt_dt);

attr_list = table_dt <<get column names (string);
count = Associative Array ();
count_partition = Associative Array ();
lothash = Associative Array ();
ecmhash = Associative Array ();
wantkey = {};
j =1;
for (i=1, i< N items (attr_list), i++, 
     thisattr= attr_list[i];
	 tmp = associative array (column(device_dt, thisattr)<< Get Values);
	 uniq_answers = tmp  << get Keys;
	 if (N items(uniq_answers)>1 | patmatch (thisattr, "ECM") | patmatch (thisattr, "LOTID") , wantkey[j]= thisattr; j ++;  jtmp=char(j); if (j>=10, jtmp="a"||jtmp ); if (j>=20, jtmp = "b"||jtmp); thekey =jtmp||thisattr; count[thekey] = thisattr );
	 if (N items(uniq_answers)>1 & !patmatch (thisattr, "WAFERID") , count_partition[thisattr] = thisattr );
     if ( patmatch (thisattr, "LOTID") , lothash= tmp);
	 if ( patmatch (thisattr, "ECM") , ecmhash= tmp);

);

device_dt << group columns ( wantkey);


show(count << get values );
show (wantkey);
tmparray = lothash << get keys;
lot = char(tmparray[1]);
tmparray = ecmhash << get keys;
ecm = char(tmparray[1]);

device_dt << Set name (ecm||"_"||lot||"_device_master");
mu_master << Set name (ecm||"_"||lot||"_mu_master");
device_dt << save(data_path||ecm||"_"||lot||"_device_master.jmp");
mu_master << save(data_path||ecm||"_"||lot||"_mu_master");
//device_dt:WAFERID << data type(Character)<<Set Modeling Type (Ordinal);
device_dt:WAFERID << data type(Numeric)<<Set Modeling Type (Nominal);


final_report= New Window (ecm||"_"||lot||"_auto_Mu_Report", 

V list Box(

Mu_master<< Graph Builder(
	Size( 573, 505 ),
	Show Control Panel( 0 ),
	Variables( X( :Eeff ), Y( :Ratio_mu_univ ), Overlay( :WAFERID ) ),
	Elements( Points( X, Y, Legend( 35 ) ) ),
	SendToReport(
		Dispatch(
			{},
			"Eeff",
			ScaleBox,
			{Format( "Best", 10 ), Min( 0.1 ),
			Add Ref Line( E_high, "Solid", "Black", char(E_high), 1 )}
		),
		Dispatch(
			{},
			"Ratio_mu_univ",
			ScaleBox,
			{Min( -0.2 ), Add Ref Line( 0, "Solid", "Black", "0%", 1 )}
		)
	)
);


Mu_master<<Graph Builder(
	Size( 545, 580 ),
	Show Control Panel( 0 ),
	Variables(
		X( :Eeff ),
		Y( :mu ),
		Y( :universal_mu, Position( 1 ) ),
		Overlay( :WAFERID )
	),
	Elements( Points( X, Y( 1 ), Y( 2 ), Legend( 38 ) ) ),
	SendToReport(
		Dispatch(
			{},
			"Eeff",
			ScaleBox,
			{Format( "Best", 10 ), Min( 0.1 ),
			Add Ref Line( E_high, "Solid", "Black", char(E_high), 1 )}
		),
		Dispatch(
			{},
			"mu",
			ScaleBox,
			{Min( 122.5 ), Max( 600 ), Inc( 100 ), Minor Ticks( 0 )}
		)
	)
);



 device_dt<< Variability Chart(
	Y(:mu_highE_univ_ratio ),
	X( count << get values),
	Max Iter( 100 ),
	Conv Limit( 0.00000001 ),
	Number Integration Abscissas( 128 ),
	Number Function Evals( 65536 ),
	Analysis Type( "Choose best analysis (EMS REML Bayesian)" ),
	Connect Cell Means( 1 ),
	Std Dev Chart( 0 ),
	Show Box Plots( 1 ),
	Mean Diamonds( 1 ),
		SendToReport(
		Dispatch(
			{"Variability Chart for Mu_highE_Univ_Ratio"},
			"2",
			ScaleBox,
			{Format( "Percent", 12, 0 )},Frame Size( 445, 240 )
		),
		),
	);


part=device_dt<< Partition(
	Y( :Mu_highE_Univ_Ratio ),
	X(
		count_partition << get keys;
	),
	Validation Portion( 0.2 ),
	Informative Missing( 1 ),
	Small Tree View( 1 ),
	split history (0),
	SendToReport(
		Dispatch(
			{},
			"Partition Graph",
			FrameBox,
			{Frame Size( 542, 279 ), DispatchSeg(
				CustomStreamSeg( 1 ),
				{Font( "Segoe UI", 14, "Plain" )}
			)}
		),
		Dispatch( {}, "Partition Report", FrameBox, {Frame Size( 542, 74 )} )
	),
);
part<<ColorPoints << Go ;

part=device_dt<< Partition(
	Y( :Max_mu_norm_new ),
	X(
		count_partition << get keys;
	),
	Validation Portion( 0.2 ),
	Informative Missing( 1 ),
	Small Tree View( 1 ),
	split history (0),
	SendToReport(
		Dispatch(
			{},
			"Partition Graph",
			FrameBox,
			{Frame Size( 542, 279 ), DispatchSeg(
				CustomStreamSeg( 1 ),
				{Font( "Segoe UI", 14, "Plain" )}
			)}
		),
		Dispatch( {}, "Partition Report", FrameBox, {Frame Size( 542, 74 )} )
	),
);
part<<ColorPoints << Go ;


part=device_dt<< Partition(
	Y( :Dit ),
	X(
		count_partition << get keys;
	),
	Validation Portion( 0.2 ),
	Informative Missing( 1 ),
	Small Tree View( 1 ),
	split history (0),
	SendToReport(
		Dispatch(
			{},
			"Partition Graph",
			FrameBox,
			{Frame Size( 542, 279 ), DispatchSeg(
				CustomStreamSeg( 1 ),
				{Font( "Segoe UI", 14, "Plain" )}
			)}
		),
		Dispatch( {}, "Partition Report", FrameBox, {Frame Size( 542, 74 )} )
	),
);
part<<ColorPoints << Go ;





 device_dt<< Variability Chart(
	Y(:vtlin, :toxe, :Max_mu_norm_new,:b1,:mu_highE ),
	X( count << get values),
	Max Iter( 100 ),
	Conv Limit( 0.00000001 ),
	Number Integration Abscissas( 128 ),
	Number Function Evals( 65536 ),
	Analysis Type( "Choose best analysis (EMS REML Bayesian)" ),
	Connect Cell Means( 1 ),
	Std Dev Chart( 0 ),
	Show Box Plots( 1 ),
	Mean Diamonds( 1 ),
		
	);
	
	
	
if (! Is Empty (device_dt:DIT),
device_dt<< Variability Chart(
	Y(:dit ),
	X( count << get values),
	Max Iter( 100 ),
	Conv Limit( 0.00000001 ),
	Number Integration Abscissas( 128 ),
	Number Function Evals( 65536 ),
	Analysis Type( "Choose best analysis (EMS REML Bayesian)" ),
	Connect Cell Means( 1 ),
	Std Dev Chart( 0 ),
	Show Box Plots( 1 ),
	Mean Diamonds( 1 ),

	);

);

if (! Is Empty (device_dt:SS100),
device_dt<< Variability Chart(
	Y(:SS100 ),
	X( count << get values),
	Max Iter( 100 ),
	Conv Limit( 0.00000001 ),
	Number Integration Abscissas( 128 ),
	Number Function Evals( 65536 ),
	Analysis Type( "Choose best analysis (EMS REML Bayesian)" ),
	Connect Cell Means( 1 ),
	Std Dev Chart( 0 ),
	Show Box Plots( 1 ),
	Mean Diamonds( 1 ),
		
	);

);


device_dt << Graph Builder(
	Size( 427, 352 ),
	Show Control Panel( 0 ),

	Variables( X( :Vtlin ), Y( :Max_mu ), Overlay( :WAFERID ) ),
	Elements( Points( X, Y, Legend( 5 ) ), Smoother( X, Y, Legend( 8 ), Lambda( 10000 ) ) )
);

device_dt << Graph Builder(
	Size( 427, 352 ),
	Show Control Panel( 0 ),

	Variables( X( :Vtlin ), Y( :SS100 ), Overlay( :WAFERID ) ),
	Elements( Points( X, Y, Legend( 5 ) ),Smoother( X, Y, Legend( 8 ), Lambda( 10000 ) ) )
);
device_dt << Graph Builder(
	Size( 427, 352 ),
	Show Control Panel( 0 ),

	Variables( X( :Vtlin ), Y( :Dit ), Overlay( :WAFERID ) ),
	Elements( Points( X, Y, Legend( 5 ) ),Smoother( X, Y, Legend( 8 ), Lambda( 10000 ) ) )
);
device_dt << Graph Builder(
	Size( 427, 352 ),
	Show Control Panel( 0 ),
	Variables( X( :Vtlin ), Y( :b1 ), Overlay( :WAFERID ) ),
	Elements( Points( X, Y, Legend( 5 ) ),Smoother( X, Y, Legend( 8 ), Lambda( 10000 ) ) )
);		
	

);
);

final_report << save Presentation (report_path||ecm||"_"||lot||"_auto_Mu_Report.pptx");
close (table_dt);